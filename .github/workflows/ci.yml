name: Squad Ride CI/CD

on:
  push:
    branches: [ main, 'release/**', 'feature/**' ]
  pull_request:
    branches: [ main, 'release/**' ]

env:
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        
    - name: Run backend tests
      run: |
        cd backend
        ./mvnw clean test
        
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run lint
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build with Docker Compose
      run: docker compose build

  # Discord notifications
  notify-success:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Discord Success Notification
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
        status: success
        title: "‚úÖ Squad Ride Deployment Successful"
        description: |
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Author:** ${{ github.actor }}
          
          üéØ Backend tests passed
          üñ•Ô∏è Frontend built successfully
          üê≥ Docker images ready
        color: 0x00ff00
        username: "Squad Ride Bot"
        avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"

  notify-failure:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-build]
    if: failure()
    
    steps:
    - name: Discord Failure Notification
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
        status: failure
        title: "‚ùå Squad Ride Build Failed"
        description: |
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Author:** ${{ github.actor }}
          
          Please check the logs for details.
        color: 0xff0000
        username: "Squad Ride Bot"
        avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"

  notify-pr:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Discord PR Notification
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
        status: ${{ job.status }}
        title: "üîÑ Pull Request Update"
        description: |
          **PR #${{ github.event.number }}:** ${{ github.event.pull_request.title }}
          **Branch:** `${{ github.head_ref }}` ‚Üí `${{ github.base_ref }}`
          **Author:** ${{ github.actor }}
          
          Tests completed successfully!
        color: 0x0099ff
        username: "Squad Ride Bot"
        avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"